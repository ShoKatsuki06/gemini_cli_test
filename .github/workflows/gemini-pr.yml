name: Gemini Auto-Coding Task

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'The issue number to process'
        required: true

jobs:
  build-and-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get issue number
        id: get_number
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Get issue content
        id: get_content
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ steps.get_number.outputs.number }};
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            });
            core.setOutput('title', issue.title);
            core.setOutput('body', issue.body);
            core.setOutput('number', issue.number);

      - name: Call Gemini API to generate patch
        id: call_gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ISSUE_TITLE: ${{ steps.get_content.outputs.title }}
          ISSUE_BODY: ${{ steps.get_content.outputs.body }}
        run: |
          set -e
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "::error::GEMINI_API_KEY secret is not set."
            exit 1
          fi

          PROMPT_TEXT=$(printf "You are an expert software engineer acting as a code generation bot. Based on the following GitHub issue, generate a patch file that can be applied to the codebase with 'git apply'. The patch should only contain code changes, no explanatory text. Ensure the patch is in the unified diff format.\n\n**Issue Title:** %s\n\n**Issue Body:**\n%s" "$ISSUE_TITLE" "$ISSUE_BODY")

          JSON_PAYLOAD=$(jq -n \
            --arg prompt "$PROMPT_TEXT" \
            '{contents: [{parts: [{text: $prompt}]}]}')

          API_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "${JSON_PAYLOAD}")
          
          HTTP_CODE=$(tail -n1 <<< "$API_RESPONSE")
          API_BODY=$(sed '$ d' <<< "$API_RESPONSE")

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "::error::Error calling Gemini API (HTTP ${HTTP_CODE}):"
            echo "$API_BODY"
            exit 1
          fi

          if echo "${API_BODY}" | jq -e '.error' >/dev/null; then
            echo "::error::Error in Gemini API response:"
            echo "${API_BODY}"
            exit 1
          fi

          PATCH_CONTENT=$(echo "${API_BODY}" | jq -r '.candidates[0].content.parts[0].text' | sed 's/```diff//g; s/```//g')
          
          echo "${PATCH_CONTENT}" > gemini.patch
          echo "Generated patch saved to gemini.patch"
          cat gemini.patch

      - name: Apply patch
        run: |
          # Check if the patch file is empty or just whitespace
          if ! grep -q '[^[:space:]]' gemini.patch; then
            echo "Gemini patch is empty. No changes to apply."
            exit 0
          fi
          # Apply the patch
          git apply --check gemini.patch
          git apply gemini.patch

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: Apply Gemini code suggestions for #${{ steps.get_content.outputs.number }}"
          branch: "gemini-changes/${{ steps.get_content.outputs.number }}"
          title: "Gemini suggestions for #${{ steps.get_content.outputs.number }}: ${{ steps.get_content.outputs.title }}"
          body: |
            This PR was automatically generated by Gemini based on issue #${{ steps.get_content.outputs.number }}.
            
            Please review the changes and merge if they are correct.
